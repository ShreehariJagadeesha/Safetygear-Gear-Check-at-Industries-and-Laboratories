{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From C:\\Users\\z003yf7f\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\op_def_library.py:263: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Colocations handled automatically by placer.\n",
      "WARNING:tensorflow:From C:\\Users\\z003yf7f\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\keras\\backend\\tensorflow_backend.py:3445: calling dropout (from tensorflow.python.ops.nn_ops) with keep_prob is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Please use `rate` instead of `keep_prob`. Rate should be set to `rate = 1 - keep_prob`.\n",
      "Found 946 images belonging to 2 classes.\n",
      "{'fail': 0, 'pass': 1}\n",
      "Found 320 images belonging to 2 classes.\n",
      "WARNING:tensorflow:From C:\\Users\\z003yf7f\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\tensorflow\\python\\ops\\math_ops.py:3066: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use tf.cast instead.\n",
      "Epoch 1/20\n",
      " 7/23 [========>.....................] - ETA: 6s - loss: 1.4706 - acc: 0.4381"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\z003yf7f\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\PIL\\TiffImagePlugin.py:780: UserWarning: Corrupt EXIF data.  Expecting to read 4 bytes but only got 0. \n",
      "  warnings.warn(str(msg))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12/23 [==============>...............] - ETA: 3s - loss: 1.1537 - acc: 0.4944"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\z003yf7f\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\PIL\\Image.py:968: UserWarning: Palette images with Transparency   expressed in bytes should be converted to RGBA images\n",
      "  ' expressed in bytes should be converted ' +\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "23/23 [==============================] - 8s 363ms/step - loss: 0.9460 - acc: 0.5826 - val_loss: 0.6015 - val_acc: 0.8083\n",
      "Epoch 2/20\n",
      "23/23 [==============================] - 8s 345ms/step - loss: 0.5313 - acc: 0.7188 - val_loss: 0.4483 - val_acc: 0.7500\n",
      "Epoch 3/20\n",
      "23/23 [==============================] - 8s 328ms/step - loss: 0.5224 - acc: 0.7491 - val_loss: 0.3222 - val_acc: 0.8636\n",
      "Epoch 4/20\n",
      "23/23 [==============================] - 8s 349ms/step - loss: 0.4136 - acc: 0.7913 - val_loss: 0.3604 - val_acc: 0.8667\n",
      "Epoch 5/20\n",
      "23/23 [==============================] - 8s 332ms/step - loss: 0.4637 - acc: 0.8029 - val_loss: 0.2842 - val_acc: 0.9000\n",
      "Epoch 6/20\n",
      "23/23 [==============================] - 7s 324ms/step - loss: 0.3992 - acc: 0.8229 - val_loss: 0.1902 - val_acc: 0.9273\n",
      "Epoch 7/20\n",
      "23/23 [==============================] - 8s 354ms/step - loss: 0.3523 - acc: 0.8609 - val_loss: 0.3562 - val_acc: 0.8083\n",
      "Epoch 8/20\n",
      "23/23 [==============================] - 8s 340ms/step - loss: 0.4111 - acc: 0.8551 - val_loss: 0.2171 - val_acc: 0.9083\n",
      "Epoch 9/20\n",
      "23/23 [==============================] - 7s 317ms/step - loss: 0.3013 - acc: 0.8809 - val_loss: 0.2533 - val_acc: 0.8818\n",
      "Epoch 10/20\n",
      "23/23 [==============================] - 8s 339ms/step - loss: 0.3656 - acc: 0.8725 - val_loss: 0.1965 - val_acc: 0.9250\n",
      "Epoch 11/20\n",
      "23/23 [==============================] - 8s 362ms/step - loss: 0.2797 - acc: 0.9101 - val_loss: 0.3935 - val_acc: 0.8364\n",
      "Epoch 12/20\n",
      "23/23 [==============================] - 8s 326ms/step - loss: 0.3477 - acc: 0.8548 - val_loss: 0.2103 - val_acc: 0.9500\n",
      "Epoch 13/20\n",
      "23/23 [==============================] - 7s 326ms/step - loss: 0.2906 - acc: 0.8783 - val_loss: 0.1594 - val_acc: 0.9500\n",
      "Epoch 14/20\n",
      "23/23 [==============================] - 8s 366ms/step - loss: 0.3580 - acc: 0.8188 - val_loss: 0.1929 - val_acc: 0.9091\n",
      "Epoch 15/20\n",
      "23/23 [==============================] - 8s 353ms/step - loss: 0.3673 - acc: 0.8348 - val_loss: 0.1726 - val_acc: 0.9417\n",
      "Epoch 16/20\n",
      "23/23 [==============================] - 8s 327ms/step - loss: 0.2222 - acc: 0.9043 - val_loss: 0.1996 - val_acc: 0.9167\n",
      "Epoch 17/20\n",
      "23/23 [==============================] - 7s 325ms/step - loss: 0.2039 - acc: 0.9216 - val_loss: 0.3846 - val_acc: 0.8727\n",
      "Epoch 18/20\n",
      "23/23 [==============================] - 8s 350ms/step - loss: 0.3060 - acc: 0.8754 - val_loss: 0.1312 - val_acc: 0.9583\n",
      "Epoch 19/20\n",
      "23/23 [==============================] - 8s 343ms/step - loss: 0.3010 - acc: 0.8899 - val_loss: 0.1896 - val_acc: 0.9167\n",
      "Epoch 20/20\n",
      "23/23 [==============================] - 7s 324ms/step - loss: 0.3550 - acc: 0.8392 - val_loss: 0.1172 - val_acc: 0.9636\n"
     ]
    }
   ],
   "source": [
    "from keras.preprocessing.image import ImageDataGenerator\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Conv2D, MaxPooling2D\n",
    "from keras.layers import Activation, Dropout, Flatten, Dense\n",
    "from keras import backend as K\n",
    "\n",
    "\n",
    "# dimensions of our images.\n",
    "img_width, img_height = 150, 150\n",
    "\n",
    "train_data_dir = r'C:\\Users\\z003yf7f\\Desktop\\image_classifier\\data\\train'\n",
    "validation_data_dir = r'C:\\Users\\z003yf7f\\Desktop\\image_classifier\\data\\validation'\n",
    "nb_train_samples = 350\n",
    "nb_validation_samples = 120\n",
    "epochs = 20\n",
    "batch_size = 15\n",
    "\n",
    "if K.image_data_format() == 'channels_first':\n",
    "    input_shape = (3, img_width, img_height)\n",
    "else:\n",
    "    input_shape = (img_width, img_height, 3)\n",
    "\n",
    "model = Sequential()\n",
    "model.add(Conv2D(32, (3, 3), input_shape=input_shape))\n",
    "model.add(Activation('relu'))\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "\n",
    "model.add(Conv2D(32, (3, 3)))\n",
    "model.add(Activation('relu'))\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "\n",
    "model.add(Conv2D(64, (3, 3)))\n",
    "model.add(Activation('relu'))\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "\n",
    "model.add(Flatten())\n",
    "model.add(Dense(64))\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.5))\n",
    "model.add(Dense(1))\n",
    "model.add(Activation('sigmoid'))\n",
    "\n",
    "model.compile(loss='binary_crossentropy', # or categorical_crossentropy\n",
    "              optimizer='rmsprop',# or adagrad\n",
    "              metrics=['accuracy'])\n",
    "\n",
    "# this is the augmentation configuration we will use for training\n",
    "train_datagen = ImageDataGenerator(\n",
    "    rescale=1. / 255,\n",
    "    shear_range=0.2,\n",
    "    zoom_range=0.2,\n",
    "    horizontal_flip=True)\n",
    "\n",
    "# this is the augmentation configuration we will use for testing:\n",
    "# only rescaling\n",
    "test_datagen = ImageDataGenerator(rescale=1. / 255)\n",
    "\n",
    "train_generator = train_datagen.flow_from_directory(\n",
    "    train_data_dir,\n",
    "    target_size=(img_width, img_height),\n",
    "    batch_size=batch_size,\n",
    "    class_mode='binary')\n",
    "\n",
    "print(train_generator.class_indices)\n",
    "\n",
    "validation_generator = test_datagen.flow_from_directory(\n",
    "    validation_data_dir,\n",
    "    target_size=(img_width, img_height),\n",
    "    batch_size=batch_size,\n",
    "    class_mode='binary')\n",
    "\n",
    "model.fit_generator(\n",
    "    train_generator,\n",
    "    steps_per_epoch=nb_train_samples // batch_size,\n",
    "    epochs=epochs,\n",
    "    validation_data=validation_generator,\n",
    "    validation_steps=nb_validation_samples // batch_size)\n",
    "\n",
    "model.save('model.h5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['fail (2).jpg', 'jallinder.jpg', 'pass (2).jpg', 'xyz.jpg']\n",
      "fail (2).jpg: fail\n",
      "jallinder.jpg: pass\n",
      "pass (2).jpg: pass\n",
      "xyz.jpg: fail\n",
      "Total pass : 2\n",
      "Total fail : 2\n"
     ]
    }
   ],
   "source": [
    "from keras.models import load_model\n",
    "from keras.preprocessing import image\n",
    "import numpy as np\n",
    "from os import listdir\n",
    "from os.path import isfile, join\n",
    "\n",
    "\n",
    "# dimensions of our images\n",
    "img_width, img_height = 150, 150\n",
    "\n",
    "# load the model we saved\n",
    "model = load_model('model.h5')\n",
    "model.compile(loss='binary_crossentropy',\n",
    "              optimizer='rmsprop',\n",
    "              metrics=['accuracy'])\n",
    "mypath = r'C:\\Users\\z003yf7f\\Desktop\\image_classifier\\predict//'\n",
    "onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]\n",
    "print(onlyfiles)\n",
    "# predicting images\n",
    "fail_counter = 0 \n",
    "pass_counter  = 0\n",
    "for file in onlyfiles:\n",
    "    img = image.load_img(mypath+file, target_size=(img_width, img_height))\n",
    "    x = image.img_to_array(img)\n",
    "    x = np.expand_dims(x, axis=0)\n",
    "    \n",
    "    images = np.vstack([x])\n",
    "    classes = model.predict_classes(images, batch_size=10)\n",
    "    classes = classes[0][0]\n",
    "    \n",
    "    if classes == 0:\n",
    "        print(file + \": \" + 'fail')\n",
    "        fail_counter += 1\n",
    "    else:\n",
    "        print(file + \": \" + 'pass')\n",
    "        pass_counter += 1\n",
    "print(\"Total pass :\",pass_counter)\n",
    "print(\"Total fail :\",fail_counter)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
